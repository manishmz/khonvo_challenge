{"version":3,"sources":["CommonComponents/Button/Button.js","config.js","Components/Job/Job.js","CustomHooks/index.js","Components/Job/AddJob/AddJob.js","constants.js","Components/Job/ViewJob/CandidateList/CandidateList.js","Components/Job/ViewJob/Dashboard/Dashboard.js","CommonComponents/Collapsible/Collapsible.js","Components/Job/ViewJob/ViewJob.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","Object","assign","className","concat","children","API_URL","Job","_useState","useState","_useState2","slicedToArray","jobList","setJobList","_useState3","_useState4","page","setPage","_useState5","_useState6","searchKey","setSearchKey","useEffect","getJobList","_ref","asyncToGenerator","regenerator_default","mark","_callee","appendData","response","result","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","json","status","data","stop","apply","this","jobListTable","map","job","key","id","onClick","goToJobDetails","companyName","jobTitle","pipelineForecast","window","onscroll","console","log","innerHeight","document","documentElement","scrollTop","offsetHeight","parseInt","react","CommonComponents_Button_Button","goToAddJobScreen","type","placeholder","value","onChange","event","target","useFormInput","initialValue","setValue","e","AddJob","jobDescription","hiringManagerName","hiringManagerEmail","handleFormSubmit","preventDefault","method","headers","Content-Type","body","JSON","stringify","goToJobScreen","_x","href","onSubmit","name","maxLength","required","rows","CANDIDATE_STAGES","READABLE_STAGES","PROSPECT","INTERVIEWING","OFFER","REJECTED","ACCEPTED","CandidateList","candidateList","setCandidateList","candidateEmail","setCandidateEmail","fetchCandidatesList","handleCandidateTag","abrupt","email","jobId","stage","_ref2","_callee2","_context2","updateCandidateStage","_ref3","_callee3","updatedStage","_context3","_x2","_x3","stageOptions","entries","candidateData","candidate","index","handleStageChange","Dashboard","dashboardData","setDashboardData","fetchDashboardData","element","_id","count","domData","ele","push","Collapsible","isOpen","setIsOpen","header","ViewJob","jobDetails","setJobDetails","fetchJobDetails","CommonComponents_Collapsible_Collapsible","ViewJob_Dashboard_Dashboard","ViewJob_CandidateList_CandidateList","App","addJobScreen","setAddJobScreen","jobScreen","setJobScreen","jobDetailScreen","setJobDetailScreen","_useState7","_useState8","setJobId","Job_ViewJob_ViewJob","Job_AddJob_AddJob","Components_Job_Job","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9e4f577.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button\r\n      {...props}\r\n      className={`button ${props.className ? props.className : \"\"}`}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","export const API_URL = \"http://localhost:8000/api\";\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport Button from \"../../CommonComponents/Button/Button\";\r\nimport \"./Job.css\";\r\nimport { API_URL } from \"./../../config\";\r\n\r\nconst Job = props => {\r\n  const [jobList, setJobList] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [searchKey, setSearchKey] = useState(\"\");\r\n  useEffect(() => {\r\n    getJobList();\r\n  }, [searchKey]);\r\n\r\n  const handleRowClick = id => {\r\n    props.goToJobDetails(id);\r\n  };\r\n\r\n  const getJobList = async (appendData = false) => {\r\n    const response = await fetch(\r\n      `${API_URL}/job/list?searchKey=${searchKey}&&page=${\r\n        appendData ? page : 0\r\n      }`\r\n    );\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      if (result.data.length > 0) {\r\n        setPage(page + 1);\r\n      }\r\n      if (appendData) {\r\n        setJobList(jobList.concat(result.data));\r\n      } else {\r\n        setPage(1);\r\n        setJobList(result.data);\r\n      }\r\n    }\r\n  };\r\n  const handleAddJobClick = () => {\r\n    props.goToAddJobScreen();\r\n  };\r\n\r\n  const handleSearchChange = event => {\r\n    setSearchKey(event.target.value);\r\n  };\r\n  const jobListTable = jobList.map(job => {\r\n    return (\r\n      <div\r\n        key={job.id}\r\n        className=\"row\"\r\n        onClick={() => {\r\n          handleRowClick(job.id);\r\n        }}\r\n      >\r\n        <div>{job.companyName}</div>\r\n        <div>{job.jobTitle}</div>\r\n        <div>${job.pipelineForecast}</div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  window.onscroll = () => {\r\n    console.log(\r\n      window.innerHeight + document.documentElement.scrollTop,\r\n      document.documentElement.offsetHeight\r\n    );\r\n    if (\r\n      parseInt(window.innerHeight + document.documentElement.scrollTop) ===\r\n      document.documentElement.offsetHeight - 1\r\n    ) {\r\n      getJobList(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"header\">\r\n        <Button onClick={handleAddJobClick} className=\"addButton\">\r\n          Add New Job\r\n        </Button>\r\n        <div className=\"form-input\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"job-search\"\r\n            placeholder=\"Search by company, job title\"\r\n            value={searchKey}\r\n            onChange={handleSearchChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"content\">\r\n        <div className=\"table table-header\">\r\n          <div>Company Name</div>\r\n          <div>Job Title</div>\r\n          <div>Pipeline Forecast</div>\r\n        </div>\r\n        <div className=\"table\">{jobListTable}</div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Job;\r\n","import { useState } from \"react\";\r\n\r\nexport const useFormInput = initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n  function onChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return {\r\n    value,\r\n    onChange\r\n  };\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport Button from \"../../../CommonComponents/Button/Button\";\r\nimport \"./AddJob.css\";\r\nimport { useFormInput } from \"../../../CustomHooks\";\r\nimport { API_URL } from \"./../../../config\";\r\n\r\nconst AddJob = props => {\r\n  const companyName = useFormInput(\"\");\r\n  const jobTitle = useFormInput(\"\");\r\n  const jobDescription = useFormInput(\"\");\r\n  const hiringManagerName = useFormInput(\"\");\r\n  const hiringManagerEmail = useFormInput(\"\");\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    const data = {\r\n      companyName: companyName.value,\r\n      jobTitle: jobTitle.value,\r\n      jobDescription: jobDescription.value,\r\n      hiringManagerName: hiringManagerName.value,\r\n      hiringManagerEmail: hiringManagerEmail.value\r\n    };\r\n    const response = await fetch(`${API_URL}/job/add`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    const result = await response.json();\r\n    console.log(result);\r\n    props.goToJobScreen();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container\">\r\n        <div>\r\n          <a href=\"#\" onClick={props.goToJobScreen}>\r\n            ⬅ Back\r\n          </a>\r\n        </div>\r\n        <form onSubmit={handleFormSubmit}>\r\n          <div className=\"form-input\">\r\n            <label> Company Name</label>\r\n            <input\r\n              name=\"companyName\"\r\n              maxLength=\"100\"\r\n              type=\"text\"\r\n              {...companyName}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Job Title</label>\r\n            <input\r\n              name=\"jobTitle\"\r\n              maxLength=\"50\"\r\n              type=\"text\"\r\n              {...jobTitle}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Job Description</label>\r\n            <textarea\r\n              name=\"jobDescription\"\r\n              rows=\"6\"\r\n              maxLength=\"500\"\r\n              {...jobDescription}\r\n            />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Hiring Manager Name</label>\r\n            <input\r\n              name=\"managerName\"\r\n              maxLength=\"50\"\r\n              type=\"text\"\r\n              {...hiringManagerName}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Hiring Manager Email</label>\r\n            <input\r\n              name=\"managerEmail\"\r\n              type=\"email\"\r\n              maxLength=\"50\"\r\n              {...hiringManagerEmail}\r\n              required\r\n            />\r\n          </div>\r\n          <Button type=\"submit\">Add Job</Button>\r\n        </form>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AddJob;\r\n","export const CANDIDATE_STAGES = {\r\n  PROSPECT: \"PROSPECT\",\r\n  INTERVIEWING: \"INTERVIEWING\",\r\n  OFFER: \"OFFER\",\r\n  REJECTED: \"REJECTED\",\r\n  ACCEPTED: \"ACCEPTED\"\r\n};\r\n\r\nexport const READABLE_STAGES = {\r\n  PROSPECT: \"Prospect\",\r\n  INTERVIEWING: \"Interviewing\",\r\n  OFFER: \"Offer\",\r\n  REJECTED: \"Rejected\",\r\n  ACCEPTED: \"Accepted\"\r\n};\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport \"./CandidateList.css\";\r\nimport { API_URL } from \"./../../../../config\";\r\nimport { CANDIDATE_STAGES } from \"./../../../../constants\";\r\nimport Button from \"./../../../../CommonComponents/Button/Button\";\r\nimport { READABLE_STAGES } from \"./../../../../constants\";\r\n\r\nconst CandidateList = props => {\r\n  const [candidateList, setCandidateList] = useState([]);\r\n  const [searchKey, setSearchKey] = useState(\"\");\r\n  const [candidateEmail, setCandidateEmail] = useState(\"\");\r\n  useEffect(() => {\r\n    fetchCandidatesList();\r\n  }, [searchKey]);\r\n\r\n  const handleCandidateTag = async event => {\r\n    if (!candidateEmail) {\r\n      return;\r\n    }\r\n    const data = {\r\n      email: candidateEmail,\r\n      jobId: props.jobId,\r\n      stage: CANDIDATE_STAGES.PROSPECT\r\n    };\r\n    const response = await fetch(`${API_URL}/candidate/tag`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      setCandidateEmail(\"\");\r\n      fetchCandidatesList();\r\n    }\r\n  };\r\n\r\n  const fetchCandidatesList = async () => {\r\n    const response = await fetch(\r\n      `${API_URL}/candidate/list?jobId=${props.jobId}&&searchKey=${searchKey}`\r\n    );\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      setCandidateList(result.data);\r\n    }\r\n  };\r\n\r\n  const updateCandidateStage = async (id, updatedStage) => {\r\n    const data = {\r\n      stage: updatedStage\r\n    };\r\n    const response = await fetch(`${API_URL}/candidate/update/stage?id=${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    fetchCandidatesList();\r\n  };\r\n\r\n  const handleSearchChange = event => {\r\n    const value = event.target.value;\r\n    setSearchKey(value);\r\n  };\r\n\r\n  const handleStageChange = (event, index) => {\r\n    const value = event.target.value;\r\n    updateCandidateStage(candidateList[index].id, value);\r\n  };\r\n\r\n  const stageOptions = Object.entries(READABLE_STAGES).map(stage => {\r\n    return <option value={stage[0]}>{stage[1]}</option>;\r\n  });\r\n\r\n  const candidateData = candidateList.map((candidate, index) => {\r\n    return [\r\n      <div key={index + \"1\"}>{candidate.email}</div>,\r\n      <div key={index + \"2\"}>\r\n        <select\r\n          value={candidate.stage}\r\n          onChange={event => handleStageChange(event, index)}\r\n        >\r\n          {stageOptions}\r\n        </select>\r\n      </div>\r\n    ];\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"form-input margin-top-10\">\r\n        <input\r\n          type=\"email\"\r\n          className=\"tag-input\"\r\n          placeholder=\"Candidate Email To Tag\"\r\n          name=\"tag\"\r\n          value={candidateEmail}\r\n          onChange={event => setCandidateEmail(event.target.value)}\r\n        />\r\n        <Button className=\"tag-button\" onClick={handleCandidateTag}>\r\n          @Tag\r\n        </Button>\r\n      </div>\r\n      <div className=\"form-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={searchKey}\r\n          onChange={handleSearchChange}\r\n          placeholder=\"Search for candidate by email, stage\"\r\n          className=\"search-input\"\r\n        />\r\n      </div>\r\n      <div className=\"candidate-table\">\r\n        <div className=\"ct-header\">Candidate Email</div>\r\n        <div className=\"ct-header\">Stage</div>\r\n        {candidateData}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CandidateList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport { API_URL } from \"./../../../../config\";\r\nimport { READABLE_STAGES } from \"./../../../../constants\";\r\n\r\nconst Dashboard = props => {\r\n  const [dashboardData, setDashboardData] = useState([]);\r\n  useEffect(() => {\r\n    fetchDashboardData();\r\n  }, [props]);\r\n\r\n  const fetchDashboardData = async () => {\r\n    const response = await fetch(\r\n      `${API_URL}/candidate/dashboard/${props.jobId}`\r\n    );\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      const data = {};\r\n      result.data.map(element => {\r\n        data[element._id.stage] = element.count;\r\n      });\r\n      setDashboardData(data);\r\n    }\r\n  };\r\n  const domData = [];\r\n  for (let stage in READABLE_STAGES) {\r\n    const ele = (\r\n      <div className=\"badge\">\r\n        {READABLE_STAGES[stage]}\r\n        <span className=\"count\">\r\n          {dashboardData[stage] ? dashboardData[stage] : 0}\r\n        </span>\r\n      </div>\r\n    );\r\n    domData.push(ele);\r\n  }\r\n  return <div className=\"dcontainer\">{domData}</div>;\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport \"./Collapsible.css\";\r\n\r\nconst Collapsible = props => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const handleClick = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <div className=\"collapsible\" onClick={handleClick}>\r\n        {props.header}\r\n        <span className=\"arrow\">{isOpen ? \"⯅\" : \"⯆\"}</span>\r\n      </div>\r\n      <div className={isOpen ? \"display-block\" : \"display-none\"}>\r\n        {props.children}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Collapsible;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport \"./ViewJob.css\";\r\nimport { API_URL } from \"./../../../config\";\r\nimport CandidateList from \"./CandidateList/CandidateList\";\r\nimport Dashboard from \"./Dashboard/Dashboard\";\r\nimport Collapsible from \"./../../../CommonComponents/Collapsible/Collapsible\";\r\n\r\nconst ViewJob = props => {\r\n  const initialJobDetails = {\r\n    companyName: \"\",\r\n    jobTitle: \"\",\r\n    jobDescription: \"\",\r\n    hiringManagerName: \"\",\r\n    hiringManagerEmail: \"\"\r\n  };\r\n  const [jobDetails, setJobDetails] = useState(initialJobDetails);\r\n\r\n  useEffect(() => {\r\n    fetchJobDetails();\r\n  }, [props]);\r\n\r\n  const fetchJobDetails = async () => {\r\n    const response = await fetch(`${API_URL}/job/detail/${props.jobId}`);\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      setJobDetails(result.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container\">\r\n        <div>\r\n          <a href=\"#\" onClick={props.goToJobScreen}>\r\n            ⬅ Back\r\n          </a>\r\n        </div>\r\n        <Collapsible header=\"Dashboard\">\r\n          <Dashboard jobId={props.jobId} />\r\n        </Collapsible>\r\n        <Collapsible header=\"Job Details\">\r\n          <div className=\"grid\">\r\n            <div className=\"label\">Company Name:</div>\r\n            <div className=\"text-value\">{jobDetails.companyName}</div>\r\n            <div className=\"label\">Title:</div>\r\n            <div className=\"text-value\">{jobDetails.jobTitle}</div>\r\n            <div className=\"label\">Description:</div>\r\n            <div className=\"text-value\">{jobDetails.jobDescription}</div>\r\n            <div className=\"label\">HR Name:</div>\r\n            <div className=\"text-value\">{jobDetails.hiringManagerName}</div>\r\n            <div className=\"label\">HR Email:</div>\r\n            <div className=\"text-value\">{jobDetails.hiringManagerEmail}</div>\r\n          </div>\r\n        </Collapsible>\r\n        <CandidateList jobId={props.jobId} />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ViewJob;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Job from \"./Components/Job/Job\";\r\nimport AddJob from \"./Components/Job/AddJob/AddJob\";\r\nimport ViewJob from \"./Components/Job/ViewJob/ViewJob\";\r\n\r\nfunction App() {\r\n  const [addJobScreen, setAddJobScreen] = useState(false);\r\n  const [jobScreen, setJobScreen] = useState(true);\r\n  const [jobDetailScreen, setJobDetailScreen] = useState(false);\r\n  const [jobId, setJobId] = useState(\"\");\r\n\r\n  const goToAddJobScreen = async () => {\r\n    setJobScreen(false);\r\n    setJobDetailScreen(false);\r\n    setAddJobScreen(true);\r\n  };\r\n\r\n  const goToJobScreen = async () => {\r\n    setJobDetailScreen(false);\r\n    setAddJobScreen(false);\r\n    setJobScreen(true);\r\n  };\r\n\r\n  const goToJobDetails = async jobId => {\r\n    setJobId(jobId);\r\n    setAddJobScreen(false);\r\n    setJobScreen(false);\r\n    setJobDetailScreen(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {jobDetailScreen && (\r\n        <ViewJob jobId={jobId} goToJobScreen={goToJobScreen} />\r\n      )}\r\n      {addJobScreen && <AddJob goToJobScreen={goToJobScreen} />}\r\n      {jobScreen && (\r\n        <Job\r\n          goToAddJobScreen={goToAddJobScreen}\r\n          goToJobDetails={goToJobDetails}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}