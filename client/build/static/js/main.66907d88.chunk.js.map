{"version":3,"sources":["CommonComponents/Button/Button.js","config.js","Components/Job/Job.js","customHooks/index.js","Components/Job/AddJob/AddJob.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","Object","assign","className","concat","children","API_URL","Job","_useState","useState","_useState2","slicedToArray","jobList","setJobList","useEffect","getJobList","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","result","wrap","_context","prev","next","fetch","sent","json","status","data","stop","apply","this","arguments","jobListTable","map","job","key","id","onClick","console","log","companyName","jobTitle","react","CommonComponents_Button_Button","goToAddJobScreen","useFormInput","initialValue","value","setValue","onChange","e","target","AddJob","jobDescription","hiringManagerName","hiringManagerEmail","handleFormSubmit","event","preventDefault","method","headers","Content-Type","body","JSON","stringify","goToJobScreen","_x","onSubmit","name","maxLength","type","rows","App","addJobScreen","setAddJobScreen","_useState3","_useState4","jobScreen","setJobScreen","_ref2","_callee2","_context2","Job_AddJob_AddJob","Components_Job_Job","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66907d88.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button\r\n      {...props}\r\n      className={`button ${props.className ? props.className : \"\"}`}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","export const API_URL = \"http://localhost:8000/api\";\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport Button from \"../../CommonComponents/Button/Button\";\r\nimport \"./Job.css\";\r\nimport { API_URL } from \"./../../config\";\r\n\r\nconst Job = props => {\r\n  const [jobList, setJobList] = useState([]);\r\n  const handleRowClick = id => {\r\n    console.log(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getJobList();\r\n  }, [props]);\r\n\r\n  const getJobList = async () => {\r\n    const response = await fetch(`${API_URL}/job/list`);\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      setJobList(result.data);\r\n    }\r\n  };\r\n  const handleAddJobClick = () => {\r\n    props.goToAddJobScreen();\r\n  };\r\n\r\n  const jobListTable = jobList.map(job => {\r\n    return (\r\n      <div\r\n        key={job.id}\r\n        className=\"row\"\r\n        onClick={() => {\r\n          handleRowClick(job.id);\r\n        }}\r\n      >\r\n        <div>{job.companyName}</div>\r\n        <div>{job.jobTitle}</div>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <Fragment>\r\n      <div className=\"header\">\r\n        <Button onClick={handleAddJobClick}>Add New Job</Button>\r\n      </div>\r\n      <div className=\"content\">\r\n        <div className=\"table table-header\">\r\n          <div>Company Name</div>\r\n          <div>Job Title</div>\r\n        </div>\r\n        <div id=\"jobListTable\" className=\"table\">\r\n          {jobListTable}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Job;\r\n","import { useState } from \"react\";\r\n\r\nexport const useFormInput = initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n  function onChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return {\r\n    value,\r\n    onChange\r\n  };\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport Button from \"../../../CommonComponents/Button/Button\";\r\nimport \"./AddJob.css\";\r\nimport { useFormInput } from \"../../../customHooks\";\r\nimport { API_URL } from \"./../../../config\";\r\n\r\nconst AddJob = props => {\r\n  const companyName = useFormInput(\"\");\r\n  const jobTitle = useFormInput(\"\");\r\n  const jobDescription = useFormInput(\"\");\r\n  const hiringManagerName = useFormInput(\"\");\r\n  const hiringManagerEmail = useFormInput(\"\");\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    const data = {\r\n      companyName: companyName.value,\r\n      jobTitle: jobTitle.value,\r\n      jobDescription: jobDescription.value,\r\n      hiringManagerName: hiringManagerName.value,\r\n      hiringManagerEmail: hiringManagerEmail.value\r\n    };\r\n    const response = await fetch(`${API_URL}/job/add`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    const result = await response.json();\r\n    console.log(result);\r\n    props.goToJobScreen();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"header\">ADD JOB</div>\r\n      <div className=\"container\">\r\n        <form onSubmit={handleFormSubmit}>\r\n          <div className=\"form-input\">\r\n            <label> Company Name</label>\r\n            <input\r\n              name=\"companyName\"\r\n              maxLength=\"100\"\r\n              type=\"text\"\r\n              {...companyName}\r\n            />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Job Title</label>\r\n            <input name=\"jobTitle\" maxLength=\"50\" type=\"text\" {...jobTitle} />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Job Description</label>\r\n            <textarea\r\n              name=\"jobDescription\"\r\n              rows=\"6\"\r\n              maxLength=\"500\"\r\n              {...jobDescription}\r\n            />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Hiring Manager Name</label>\r\n            <input\r\n              name=\"managerName\"\r\n              maxLength=\"50\"\r\n              type=\"text\"\r\n              {...hiringManagerName}\r\n            />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Hiring Manager Email</label>\r\n            <input\r\n              name=\"managerEmail\"\r\n              type=\"email\"\r\n              maxLength=\"50\"\r\n              {...hiringManagerEmail}\r\n            />\r\n          </div>\r\n          <Button type=\"submit\">Add Job</Button>\r\n        </form>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AddJob;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Job from \"./Components/Job/Job\";\nimport AddJob from \"./Components/Job/AddJob/AddJob\";\n\nfunction App() {\n  const [addJobScreen, setAddJobScreen] = useState(false);\n  const [jobScreen, setJobScreen] = useState(true);\n  const goToAddJobScreen = async () => {\n    setJobScreen(false);\n    setAddJobScreen(true);\n  };\n\n  const goToJobScreen = async () => {\n    setAddJobScreen(false);\n    setJobScreen(true);\n  };\n  return (\n    <div>\n      {addJobScreen && <AddJob goToJobScreen={goToJobScreen} />}\n      {jobScreen && <Job goToAddJobScreen={goToAddJobScreen} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}