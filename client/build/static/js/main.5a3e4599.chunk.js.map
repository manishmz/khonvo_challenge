{"version":3,"sources":["CommonComponents/Button/Button.js","config.js","Components/Job/Job.js","CustomHooks/index.js","Components/Job/AddJob/AddJob.js","constants.js","Components/Job/ViewJob/CandidateList/CandidateList.js","Components/Job/ViewJob/Dashboard/Dashboard.js","CommonComponents/Collapsible/Collapsible.js","Components/Job/ViewJob/ViewJob.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","Object","assign","className","concat","children","API_URL","Job","_useState","useState","_useState2","slicedToArray","jobList","setJobList","_useState3","_useState4","searchKey","setSearchKey","useEffect","getJobList","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","result","wrap","_context","prev","next","fetch","sent","json","status","data","stop","apply","this","arguments","jobListTable","map","job","key","id","onClick","goToJobDetails","companyName","jobTitle","pipelineForecast","react","CommonComponents_Button_Button","goToAddJobScreen","type","placeholder","value","onChange","event","target","useFormInput","initialValue","setValue","e","AddJob","jobDescription","hiringManagerName","hiringManagerEmail","handleFormSubmit","preventDefault","method","headers","Content-Type","body","JSON","stringify","console","log","goToJobScreen","_x","href","onSubmit","name","maxLength","rows","CANDIDATE_STAGES","READABLE_STAGES","PROSPECT","INTERVIEWING","OFFER","REJECTED","ACCEPTED","CandidateList","candidateList","setCandidateList","_useState5","_useState6","candidateEmail","setCandidateEmail","fetchCandidatesList","handleCandidateTag","abrupt","email","jobId","stage","_ref2","_callee2","_context2","updateCandidateStage","_ref3","_callee3","updatedStage","_context3","_x2","_x3","stageOptions","entries","candidateData","candidate","index","handleStageChange","Dashboard","dashboardData","setDashboardData","fetchDashboardData","element","_id","count","domData","ele","push","Collapsible","isOpen","setIsOpen","header","ViewJob","jobDetails","setJobDetails","fetchJobDetails","CommonComponents_Collapsible_Collapsible","ViewJob_Dashboard_Dashboard","ViewJob_CandidateList_CandidateList","App","addJobScreen","setAddJobScreen","jobScreen","setJobScreen","jobDetailScreen","setJobDetailScreen","_useState7","_useState8","setJobId","Job_ViewJob_ViewJob","Job_AddJob_AddJob","Components_Job_Job","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a3e4599.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button\r\n      {...props}\r\n      className={`button ${props.className ? props.className : \"\"}`}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","export const API_URL = \"http://localhost:8000/api\";\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport Button from \"../../CommonComponents/Button/Button\";\r\nimport \"./Job.css\";\r\nimport { API_URL } from \"./../../config\";\r\n\r\nconst Job = props => {\r\n  const [jobList, setJobList] = useState([]);\r\n  const [searchKey, setSearchKey] = useState(\"\");\r\n  useEffect(() => {\r\n    getJobList();\r\n  }, [searchKey]);\r\n\r\n  const handleRowClick = id => {\r\n    props.goToJobDetails(id);\r\n  };\r\n\r\n  const getJobList = async () => {\r\n    const response = await fetch(`${API_URL}/job/list?searchKey=${searchKey}`);\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      setJobList(result.data);\r\n    }\r\n  };\r\n  const handleAddJobClick = () => {\r\n    props.goToAddJobScreen();\r\n  };\r\n\r\n  const handleSearchChange = event => {\r\n    setSearchKey(event.target.value);\r\n  };\r\n  const jobListTable = jobList.map(job => {\r\n    return (\r\n      <div\r\n        key={job.id}\r\n        className=\"row\"\r\n        onClick={() => {\r\n          handleRowClick(job.id);\r\n        }}\r\n      >\r\n        <div>{job.companyName}</div>\r\n        <div>{job.jobTitle}</div>\r\n        <div>${job.pipelineForecast}</div>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <Fragment>\r\n      <div className=\"header\">\r\n        <Button onClick={handleAddJobClick}>Add New Job</Button>\r\n        <div className=\"search-container  form-input\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"job-search\"\r\n            placeholder=\"Search by Company, Job Title\"\r\n            value={searchKey}\r\n            onChange={handleSearchChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"content\">\r\n        <div className=\"table table-header\">\r\n          <div>Company Name</div>\r\n          <div>Job Title</div>\r\n          <div>Pipeline Forecast</div>\r\n        </div>\r\n        <div id=\"jobListTable\" className=\"table\">\r\n          {jobListTable}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Job;\r\n","import { useState } from \"react\";\r\n\r\nexport const useFormInput = initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n  function onChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return {\r\n    value,\r\n    onChange\r\n  };\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport Button from \"../../../CommonComponents/Button/Button\";\r\nimport \"./AddJob.css\";\r\nimport { useFormInput } from \"../../../CustomHooks\";\r\nimport { API_URL } from \"./../../../config\";\r\n\r\nconst AddJob = props => {\r\n  const companyName = useFormInput(\"\");\r\n  const jobTitle = useFormInput(\"\");\r\n  const jobDescription = useFormInput(\"\");\r\n  const hiringManagerName = useFormInput(\"\");\r\n  const hiringManagerEmail = useFormInput(\"\");\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    const data = {\r\n      companyName: companyName.value,\r\n      jobTitle: jobTitle.value,\r\n      jobDescription: jobDescription.value,\r\n      hiringManagerName: hiringManagerName.value,\r\n      hiringManagerEmail: hiringManagerEmail.value\r\n    };\r\n    const response = await fetch(`${API_URL}/job/add`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    const result = await response.json();\r\n    console.log(result);\r\n    props.goToJobScreen();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"header\">ADD JOB</div>\r\n      <div className=\"container\">\r\n        <div>\r\n          <a href=\"#\" onClick={props.goToJobScreen}>\r\n            Back\r\n          </a>\r\n        </div>\r\n        <form onSubmit={handleFormSubmit}>\r\n          <div className=\"form-input\">\r\n            <label> Company Name</label>\r\n            <input\r\n              name=\"companyName\"\r\n              maxLength=\"100\"\r\n              type=\"text\"\r\n              {...companyName}\r\n            />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Job Title</label>\r\n            <input name=\"jobTitle\" maxLength=\"50\" type=\"text\" {...jobTitle} />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Job Description</label>\r\n            <textarea\r\n              name=\"jobDescription\"\r\n              rows=\"6\"\r\n              maxLength=\"500\"\r\n              {...jobDescription}\r\n            />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Hiring Manager Name</label>\r\n            <input\r\n              name=\"managerName\"\r\n              maxLength=\"50\"\r\n              type=\"text\"\r\n              {...hiringManagerName}\r\n            />\r\n          </div>\r\n          <div className=\"form-input\">\r\n            <label> Hiring Manager Email</label>\r\n            <input\r\n              name=\"managerEmail\"\r\n              type=\"email\"\r\n              maxLength=\"50\"\r\n              {...hiringManagerEmail}\r\n            />\r\n          </div>\r\n          <Button type=\"submit\">Add Job</Button>\r\n        </form>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AddJob;\r\n","export const CANDIDATE_STAGES = {\r\n  PROSPECT: \"PROSPECT\",\r\n  INTERVIEWING: \"INTERVIEWING\",\r\n  OFFER: \"OFFER\",\r\n  REJECTED: \"REJECTED\",\r\n  ACCEPTED: \"ACCEPTED\"\r\n};\r\n\r\nexport const READABLE_STAGES = {\r\n  PROSPECT: \"Prospect\",\r\n  INTERVIEWING: \"Interviewing\",\r\n  OFFER: \"Offer\",\r\n  REJECTED: \"Rejected\",\r\n  ACCEPTED: \"Accepted\"\r\n};\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport \"./CandidateList.css\";\r\nimport { API_URL } from \"./../../../../config\";\r\nimport { CANDIDATE_STAGES } from \"./../../../../constants\";\r\nimport Button from \"./../../../../CommonComponents/Button/Button\";\r\nimport { READABLE_STAGES } from \"./../../../../constants\";\r\n\r\nconst CandidateList = props => {\r\n  const [candidateList, setCandidateList] = useState([]);\r\n  const [searchKey, setSearchKey] = useState(\"\");\r\n  const [candidateEmail, setCandidateEmail] = useState(\"\");\r\n  useEffect(() => {\r\n    fetchCandidatesList();\r\n  }, [searchKey]);\r\n\r\n  const handleCandidateTag = async event => {\r\n    if (!candidateEmail) {\r\n      return;\r\n    }\r\n    const data = {\r\n      email: candidateEmail,\r\n      jobId: props.jobId,\r\n      stage: CANDIDATE_STAGES.PROSPECT\r\n    };\r\n    const response = await fetch(`${API_URL}/candidate/tag`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      setCandidateEmail(\"\");\r\n      fetchCandidatesList();\r\n    }\r\n  };\r\n\r\n  const fetchCandidatesList = async () => {\r\n    const response = await fetch(\r\n      `${API_URL}/candidate/list?jobId=${props.jobId}&&searchKey=${searchKey}`\r\n    );\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      setCandidateList(result.data);\r\n    }\r\n  };\r\n\r\n  const updateCandidateStage = async (id, updatedStage) => {\r\n    const data = {\r\n      stage: updatedStage\r\n    };\r\n    const response = await fetch(`${API_URL}/candidate/update/stage?id=${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    fetchCandidatesList();\r\n  };\r\n\r\n  const handleSearchChange = event => {\r\n    const value = event.target.value;\r\n    setSearchKey(value);\r\n  };\r\n\r\n  const handleStageChange = (event, index) => {\r\n    const value = event.target.value;\r\n    updateCandidateStage(candidateList[index].id, value);\r\n  };\r\n\r\n  const stageOptions = Object.entries(READABLE_STAGES).map(stage => {\r\n    return <option value={stage[0]}>{stage[1]}</option>;\r\n  });\r\n\r\n  const candidateData = candidateList.map((candidate, index) => {\r\n    return [\r\n      <div key={index + \"1\"}>{candidate.email}</div>,\r\n      <div key={index + \"2\"}>\r\n        <select\r\n          value={candidate.stage}\r\n          onChange={event => handleStageChange(event, index)}\r\n        >\r\n          {stageOptions}\r\n        </select>\r\n      </div>\r\n    ];\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"form-input margin-15\">\r\n        <input\r\n          type=\"email\"\r\n          className=\"tag-input\"\r\n          placeholder=\"Candidate Email To Tag\"\r\n          name=\"tag\"\r\n          value={candidateEmail}\r\n          onChange={event => setCandidateEmail(event.target.value)}\r\n        />\r\n        <Button className=\"tag-button\" onClick={handleCandidateTag}>\r\n          @Tag\r\n        </Button>\r\n      </div>\r\n      <div className=\"form-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={searchKey}\r\n          onChange={handleSearchChange}\r\n          placeholder=\"Search for candidate by email, stage\"\r\n          className=\"tag-input\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"candidate-table\">\r\n        <div className=\"ct-header\">Candidate Email</div>\r\n        <div className=\"ct-header\">Stage</div>\r\n        {candidateData}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CandidateList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport { API_URL } from \"./../../../../config\";\r\nimport { READABLE_STAGES } from \"./../../../../constants\";\r\n\r\nconst Dashboard = props => {\r\n  const [dashboardData, setDashboardData] = useState([]);\r\n  useEffect(() => {\r\n    fetchDashboardData();\r\n  }, [props]);\r\n\r\n  const fetchDashboardData = async () => {\r\n    const response = await fetch(\r\n      `${API_URL}/candidate/dashboard/${props.jobId}`\r\n    );\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      const data = {};\r\n      result.data.map(element => {\r\n        data[element._id.stage] = element.count;\r\n      });\r\n      setDashboardData(data);\r\n    }\r\n  };\r\n  const domData = [];\r\n  for (let stage in READABLE_STAGES) {\r\n    const ele = (\r\n      <div className=\"badge\">\r\n        {READABLE_STAGES[stage]}\r\n        <span className=\"count\">\r\n          {dashboardData[stage] ? dashboardData[stage] : 0}\r\n        </span>\r\n      </div>\r\n    );\r\n    domData.push(ele);\r\n  }\r\n  return <div className=\"dcontainer\">{domData}</div>;\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport \"./Collapsible.css\";\r\n\r\nconst Collapsible = props => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const handleClick = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <div className=\"collapsible\" onClick={handleClick}>\r\n        {props.header}\r\n        <span className=\"arrow\">{isOpen ? \"⯅\" : \"⯆\"}</span>\r\n      </div>\r\n      <div className={isOpen ? \"display-block\" : \"display-none\"}>\r\n        {props.children}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Collapsible;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport \"./ViewJob.css\";\r\nimport { API_URL } from \"./../../../config\";\r\nimport CandidateList from \"./CandidateList/CandidateList\";\r\nimport Dashboard from \"./Dashboard/Dashboard\";\r\nimport Collapsible from \"./../../../CommonComponents/Collapsible/Collapsible\";\r\n\r\nconst ViewJob = props => {\r\n  const initialJobDetails = {\r\n    companyName: \"\",\r\n    jobTitle: \"\",\r\n    jobDescription: \"\",\r\n    hiringManagerName: \"\",\r\n    hiringManagerEmail: \"\"\r\n  };\r\n  const [jobDetails, setJobDetails] = useState(initialJobDetails);\r\n\r\n  useEffect(() => {\r\n    fetchJobDetails();\r\n  }, [props]);\r\n\r\n  const fetchJobDetails = async () => {\r\n    const response = await fetch(`${API_URL}/job/detail/${props.jobId}`);\r\n    const result = await response.json();\r\n    if (result.status === \"SUCCESS\") {\r\n      setJobDetails(result.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"content\">\r\n        <div>\r\n          <a href=\"#\" onClick={props.goToJobScreen}>\r\n            Back\r\n          </a>\r\n        </div>\r\n        <Collapsible id=\"collapse1\" header=\"Dashboard\">\r\n          <Dashboard jobId={props.jobId} />\r\n        </Collapsible>\r\n        <Collapsible header=\"Job Details\">\r\n          <div className=\"grid\">\r\n            <div className=\"label\">Company Name:</div>\r\n            <div className=\"text-value\">{jobDetails.companyName}</div>\r\n            <div className=\"label\">Title:</div>\r\n            <div className=\"text-value\">{jobDetails.jobTitle}</div>\r\n            <div className=\"label\">Description:</div>\r\n            <div className=\"text-value\">{jobDetails.jobDescription}</div>\r\n            <div className=\"label\">HR Name:</div>\r\n            <div className=\"text-value\">{jobDetails.hiringManagerName}</div>\r\n            <div className=\"label\">HR Email:</div>\r\n            <div className=\"text-value\">{jobDetails.hiringManagerEmail}</div>\r\n          </div>\r\n        </Collapsible>\r\n        <CandidateList jobId={props.jobId} />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ViewJob;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Job from \"./Components/Job/Job\";\r\nimport AddJob from \"./Components/Job/AddJob/AddJob\";\r\nimport ViewJob from \"./Components/Job/ViewJob/ViewJob\";\r\n\r\nfunction App() {\r\n  const [addJobScreen, setAddJobScreen] = useState(false);\r\n  const [jobScreen, setJobScreen] = useState(true);\r\n  const [jobDetailScreen, setJobDetailScreen] = useState(false);\r\n  const [jobId, setJobId] = useState(\"\");\r\n\r\n  const goToAddJobScreen = async () => {\r\n    setJobScreen(false);\r\n    setJobDetailScreen(false);\r\n    setAddJobScreen(true);\r\n  };\r\n\r\n  const goToJobScreen = async () => {\r\n    setJobDetailScreen(false);\r\n    setAddJobScreen(false);\r\n    setJobScreen(true);\r\n  };\r\n\r\n  const goToJobDetails = async jobId => {\r\n    setJobId(jobId);\r\n    setAddJobScreen(false);\r\n    setJobScreen(false);\r\n    setJobDetailScreen(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {jobDetailScreen && (\r\n        <ViewJob jobId={jobId} goToJobScreen={goToJobScreen} />\r\n      )}\r\n      {addJobScreen && <AddJob goToJobScreen={goToJobScreen} />}\r\n      {jobScreen && (\r\n        <Job\r\n          goToAddJobScreen={goToAddJobScreen}\r\n          goToJobDetails={goToJobDetails}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}